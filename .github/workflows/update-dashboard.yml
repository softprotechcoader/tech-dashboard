name: Update Tech Dashboard

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update even if no changes'
        required: false
        default: false
        type: boolean
  push:
    branches:
      - main
    paths:
      - 'config/interests.json'
      - 'scripts/**'

env:
  PYTHON_VERSION: '3.11'

jobs:
  update-dashboard:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: ✅ Validate configuration
        run: |
          python -c "import json; import sys; config = json.load(open('config/interests.json')); print('✅ Configuration validation passed'); print(f'📊 Found {len(config.get(\"interests\", {}))} interest categories'); print(f'🎯 Found {len(config.get(\"learning_goals\", []))} learning goals')"

      - name: 🗂️ Create data directory
        run: |
          mkdir -p data
          echo "Data directory for generated files" > data/.gitkeep

      - name: 📰 Fetch Tech News and Updates
        id: fetch_data
        run: |
          echo "📊 Starting data collection..."
          python scripts/fetch_tech_updates.py
          
          # Check if data was generated
          if [ -f "data/dashboard_data.json" ]; then
            echo "✅ Data collection successful"
            echo "data_generated=true" >> $GITHUB_OUTPUT
            
            # Extract stats from generated data
            STATS=$(python -c "
            import json
            with open('data/dashboard_data.json', 'r') as f:
                data = json.load(f)
            stats = data.get('stats', {})
            print(f\"📰 {stats.get('total_news_items', 0)} news articles\")
            print(f\"🔥 {stats.get('total_trending_repos', 0)} trending repos\")
            print(f\"🚀 {stats.get('total_releases', 0)} latest releases\")
            ")
            echo "stats<<EOF" >> $GITHUB_OUTPUT
            echo "$STATS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "❌ Data collection failed"
            echo "data_generated=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: 📝 Generate README
        if: steps.fetch_data.outputs.data_generated == 'true'
        run: |
          echo "📝 Generating README..."
          python scripts/generate_readme.py
          
          if [ -f "README.md" ]; then
            echo "✅ README generation successful"
            echo "📄 README.md updated with latest data"
          else
            echo "❌ README generation failed"
            exit 1
          fi

      - name: 🔍 Check for changes
        id: check_changes
        run: |
          git add .
          if git diff --cached --quiet; then
            echo "No changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            # Show what changed
            echo "📋 Changed files:"
            git diff --cached --name-only
          fi

      - name: 📊 Display Update Summary
        if: steps.check_changes.outputs.has_changes == 'true' || github.event.inputs.force_update == 'true'
        run: |
          echo "📊 Update Summary:"
          echo "=================="
          echo "🕐 Timestamp: $(date +'%Y-%m-%d %H:%M:%S UTC')"
          echo "🔄 Trigger: ${{ github.event_name }}"
          echo ""
          echo "📈 Data Collected:"
          echo "${{ steps.fetch_data.outputs.stats }}"
          echo ""
          if [ "${{ steps.check_changes.outputs.has_changes }}" == "true" ]; then
            echo "📝 Files Updated:"
            git diff --cached --name-only | sed 's/^/  - /'
          fi

      - name: 🚀 Commit and Push changes
        if: steps.check_changes.outputs.has_changes == 'true' || github.event.inputs.force_update == 'true'
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          COMMIT_MSG="🤖 Auto-update: Tech Dashboard $(date +'%Y-%m-%d %H:%M')"
          
          # Add stats to commit message
          COMMIT_MSG="$COMMIT_MSG

          📊 Update Summary:
          ${{ steps.fetch_data.outputs.stats }}
          
          🔄 Triggered by: ${{ github.event_name }}
          ⏰ Updated: $(date +'%Y-%m-%d %H:%M:%S UTC')"
          
          git commit -m "$COMMIT_MSG"
          git push

      - name: 📈 Create Update Summary
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "## 📊 Dashboard Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🕐 **Updated:** $(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "🔄 **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Data Collected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.fetch_data.outputs.stats }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Files Updated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          git diff --cached --name-only | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Status:** Dashboard updated successfully!" >> $GITHUB_STEP_SUMMARY

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: update-dashboard
    if: failure()
    steps:
      - name: 🚨 Failure Notification
        run: |
          echo "## ❌ Dashboard Update Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🕐 **Failed at:** $(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "🔄 **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY